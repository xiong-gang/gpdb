-- This test assumes 3 primaries and 3 mirrors from a gpdemo segwalrep cluster

create extension if not exists gp_inject_fault;
CREATE

include: helpers/server_helpers.sql;
CREATE

-- make sure we are in-sync for the primary we will be testing with
select content, role, preferred_role, mode, status from gp_segment_configuration;
content|role|preferred_role|mode|status
-------+----+--------------+----+------
-1     |p   |p             |n   |u     
-1     |m   |m             |s   |u     
2      |p   |p             |s   |u     
2      |m   |m             |s   |u     
1      |p   |p             |s   |u     
1      |m   |m             |s   |u     
0      |p   |p             |s   |u     
0      |m   |m             |s   |u     
(8 rows)

-- print synchronous_standby_names should be set to '*' at start of test
0U: show synchronous_standby_names;
synchronous_standby_names
-------------------------
*                        
(1 row)

-- create table and show commits are not blocked
create table segwalrep_commit_blocking (a int) distributed by (a);
CREATE
insert into segwalrep_commit_blocking values (1);
INSERT 1

-- skip FTS probes always
select gp_inject_fault('fts_probe', 'reset', dbid) from gp_segment_configuration where content = -1 and role = 'p';
gp_inject_fault
---------------
t              
(1 row)
select gp_inject_fault_infinite('fts_probe', 'skip', dbid) from gp_segment_configuration where content = -1 and role = 'p';
gp_inject_fault_infinite
------------------------
t                       
(1 row)
-- force scan to trigger the fault
select gp_request_fts_probe_scan();
gp_request_fts_probe_scan
-------------------------
t                        
(1 row)
-- verify the failure should be triggered once
select gp_wait_until_triggered_fault('fts_probe', 1, 1);
gp_wait_until_triggered_fault
-----------------------------
t                            
(1 row)

-- stop a mirror and show commit on dbid 2 will block
-1U: select pg_ctl((select datadir from gp_segment_configuration c where c.role='m' and c.content=0), 'stop');
pg_ctl                                              
----------------------------------------------------
waiting for server to shut down done
server stopped

(1 row)
-- We should insert a tuple to segment 0.
-- With jump consistent hash as the underlying hash algorithm,
-- a int value of 4 is on seg0.
0U&: insert into segwalrep_commit_blocking values (4);  <waiting ...>

-- restart primary dbid 2
-1U: select pg_ctl((select datadir from gp_segment_configuration c where c.role='p' and c.content=0), 'restart');
pg_ctl                                                                                              
----------------------------------------------------------------------------------------------------
waiting for server to shut down done
server stopped
waiting for server to start done
server started

(1 row)

-- should show dbid 2 utility mode connection closed because of primary restart
0U<:  <... completed>
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
0Uq: ... <quitting>

-- synchronous_standby_names should be set to '*' after primary restart
0U: show synchronous_standby_names;
synchronous_standby_names
-------------------------
*                        
(1 row)

-- this should block since mirror is not up and sync replication is on
3: begin;
BEGIN
3: insert into segwalrep_commit_blocking values (1);
INSERT 1
3&: commit;  <waiting ...>

-- this should not block due to direct dispatch to primary with active synced mirror
4: insert into segwalrep_commit_blocking values (3);
INSERT 1

-- bring the mirror back up
-1U: select pg_ctl_start(datadir, port, content, dbid) from gp_segment_configuration where role = 'm' and content = 0;
pg_ctl_start    
----------------
server starting

(1 row)

-- should unblock and commit now that mirror is back up and in-sync
3<:  <... completed>
COMMIT

-- resume FTS probes
select gp_inject_fault('fts_probe', 'reset', dbid) from gp_segment_configuration where content = -1 and role = 'p';
gp_inject_fault
---------------
t              
(1 row)

-- everything should be back to normal
4: insert into segwalrep_commit_blocking select i from generate_series(1,10)i;
INSERT 10
4: select * from segwalrep_commit_blocking order by a;
a 
--
1 
1 
1 
2 
3 
3 
4 
4 
5 
6 
7 
8 
9 
10
(14 rows)

-----------------------------------------------------------------
-- Master commit blocking
--
-----------------------------------------------------------------
-- set synchronous_standby_names to '*'
alter system set synchronous_standby_names to '*';
ALTER

-- reload to make synchronous_standby_names effective
!\retcode gpstop -u;
-- start_ignore
20181227:07:38:52:476186 gpstop:master:gpadmin-[INFO]:-Starting gpstop with args: -u
20181227:07:38:52:476186 gpstop:master:gpadmin-[INFO]:-Gathering information and validating the environment...
20181227:07:38:52:476186 gpstop:master:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information
20181227:07:38:52:476186 gpstop:master:gpadmin-[INFO]:-Obtaining Segment details from master...
20181227:07:38:53:476186 gpstop:master:gpadmin-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.13508.g3fbb7644e7 build dev-oss'
20181227:07:38:53:476186 gpstop:master:gpadmin-[INFO]:-Signalling all postmaster processes to reload
. 

-- end_ignore
(exited with code 0)

-- reset connection
-- start_ignore
begin;end;
ERROR:  Error on receive from seg0 172.17.0.7:25432 pid=476124: server closed the connection unexpectedly
DETAIL:  
	This probably means the server terminated abnormally
	before or while processing the request.
-- end_ignore

-- create table and show commits are not blocked
create table standbywalrep_commit_blocking (a int) distributed by (a);
CREATE
insert into standbywalrep_commit_blocking values (1);
INSERT 1

-- stop standby and show commit will block
select pg_ctl((select datadir from gp_segment_configuration c where c.role='m' and c.content=-1), 'stop');
pg_ctl                                              
----------------------------------------------------
waiting for server to shut down done
server stopped

(1 row)

-- this should block since standby is not up and sync replication is on
3: begin;
BEGIN
3: insert into standbywalrep_commit_blocking values (2);
INSERT 1
3&: commit;  <waiting ...>

-- set synchronous_standby_names to ''
alter system set synchronous_standby_names to '';
ALTER

-- reload to make synchronous_standby_names effective
!\retcode gpstop -u;
-- start_ignore
20181227:07:38:54:476234 gpstop:master:gpadmin-[INFO]:-Starting gpstop with args: -u
20181227:07:38:54:476234 gpstop:master:gpadmin-[INFO]:-Gathering information and validating the environment...
20181227:07:38:54:476234 gpstop:master:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information
20181227:07:38:54:476234 gpstop:master:gpadmin-[INFO]:-Obtaining Segment details from master...
20181227:07:38:55:476234 gpstop:master:gpadmin-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.13508.g3fbb7644e7 build dev-oss'
20181227:07:38:55:476234 gpstop:master:gpadmin-[INFO]:-Signalling all postmaster processes to reload
. 
20181227:07:38:56:476234 gpstop:master:gpadmin-[INFO]:---------------------------------------------
20181227:07:38:56:476234 gpstop:master:gpadmin-[INFO]:-Some segment postmasters were not reloaded
20181227:07:38:56:476234 gpstop:master:gpadmin-[INFO]:---------------------------------------------
20181227:07:38:56:476234 gpstop:master:gpadmin-[INFO]:-   Host     Datadir                                                      Port    Status
20181227:07:38:56:476234 gpstop:master:gpadmin-[INFO]:-   master   /home/gpadmin/workspace/gpdb/gpAux/gpdemo/datadirs/standby   16432   u
20181227:07:38:56:476234 gpstop:master:gpadmin-[INFO]:---------------------------------------------

-- end_ignore
(exited with code 1)

-- should unblock and commit now that synchronous_standby_names set to ''
3<:  <... completed>
COMMIT

-- bring the standby back up
select pg_ctl_start(datadir, port, content, dbid) from gp_segment_configuration where role='m' and content=-1;
pg_ctl_start    
----------------
server starting

(1 row)

-- set synchronous_standby_names to '*'
alter system set synchronous_standby_names to '*';
ALTER

-- reload to make synchronous_standby_names effective
!\retcode gpstop -u;
-- start_ignore
20181227:07:38:56:476278 gpstop:master:gpadmin-[INFO]:-Starting gpstop with args: -u
20181227:07:38:56:476278 gpstop:master:gpadmin-[INFO]:-Gathering information and validating the environment...
20181227:07:38:56:476278 gpstop:master:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information
20181227:07:38:56:476278 gpstop:master:gpadmin-[INFO]:-Obtaining Segment details from master...
20181227:07:38:56:476278 gpstop:master:gpadmin-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.13508.g3fbb7644e7 build dev-oss'
20181227:07:38:56:476278 gpstop:master:gpadmin-[INFO]:-Signalling all postmaster processes to reload
. 

-- end_ignore
(exited with code 0)

-- everything should be back to normal
insert into standbywalrep_commit_blocking select i from generate_series(1,10)i;
INSERT 10
select * from standbywalrep_commit_blocking order by a;
a 
--
1 
1 
2 
2 
3 
4 
5 
6 
7 
8 
9 
10
(12 rows)

-- set synchronous_standby_names to default value
alter system set synchronous_standby_names to default;
ALTER

-- reload to make synchronous_standby_names effective
!\retcode gpstop -u;
-- start_ignore
20181227:07:38:57:476326 gpstop:master:gpadmin-[INFO]:-Starting gpstop with args: -u
20181227:07:38:57:476326 gpstop:master:gpadmin-[INFO]:-Gathering information and validating the environment...
20181227:07:38:57:476326 gpstop:master:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information
20181227:07:38:57:476326 gpstop:master:gpadmin-[INFO]:-Obtaining Segment details from master...
20181227:07:38:57:476326 gpstop:master:gpadmin-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.13508.g3fbb7644e7 build dev-oss'
20181227:07:38:57:476326 gpstop:master:gpadmin-[INFO]:-Signalling all postmaster processes to reload
. 

-- end_ignore
(exited with code 0)
