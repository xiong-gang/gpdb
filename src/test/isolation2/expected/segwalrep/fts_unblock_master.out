-- This test is the master prober version of fts_unblock_primary, it tests
-- when standby is down and master will block all the following transactions
-- until master prober detects it and mark standby down.

-- This test assumes 3 primaries and 3 mirrors from a gpdemo segwalrep cluster
-- This test assumes master prober is running on segment 0 and dbid is 2

-- function to wait for standby to come up in sync (1 minute timeout)
create or replace function wait_for_streaming(contentid smallint) returns void as $$ declare updated bool; /* in func */ begin /* in func */ for i in 1 .. 120 loop /* in func */ perform gp_request_fts_probe_scan(); /* in func */ select (mode = 's' and status = 'u') into updated /* in func */ from gp_segment_configuration /* in func */ where content = contentid and role = 'm'; /* in func */ exit when updated; /* in func */ perform pg_sleep(0.5); /* in func */ end loop; /* in func */ end; /* in func */ $$ language plpgsql;
CREATE

include: helpers/server_helpers.sql;
CREATE

-- make sure we are in-sync for the master we will be testing with
select sync_state from pg_stat_replication;
sync_state
----------
sync      
(1 row)
-- the master prober is on segment 0, dbid is 2
select dbid, content from gp_segment_configuration where master_prober = 't';
dbid|content
----+-------
2   |0      
(1 row)
-- gp_segment_configuration on segment 0 shows master/standby is in-sync
0U: select content, role, preferred_role, mode, status from gp_segment_configuration;
content|role|preferred_role|mode|status
-------+----+--------------+----+------
-1     |p   |p             |s   |u     
-1     |m   |m             |s   |u     
(2 rows)

-- synchronous_standby_names should be set to '*' by default on master, since
-- we have a working/sync'd standby
show synchronous_standby_names;
synchronous_standby_names
-------------------------
*                        
(1 row)
show gp_fts_mark_mirror_down_grace_period;
gp_fts_mark_mirror_down_grace_period
------------------------------------
30s                                 
(1 row)

-- create table and show commits are not blocked
create table fts_unblock_master (a int) distributed by (a);
CREATE

-- skip master prober probes always
create extension if not exists gp_inject_fault;
CREATE
select gp_inject_fault('fts_probe', 'reset', 2);
gp_inject_fault
---------------
t              
(1 row)
select gp_inject_fault_infinite('fts_probe', 'skip', 2);
gp_inject_fault_infinite
------------------------
t                       
(1 row)
-- force scan to trigger the fault
0U: select gp_request_fts_probe_scan();
gp_request_fts_probe_scan
-------------------------
t                        
(1 row)
-- verify the failure should be triggered once
select gp_wait_until_triggered_fault('fts_probe', 1, 2);
gp_wait_until_triggered_fault
-----------------------------
t                            
(1 row)

-- stop the standby
-1U: select pg_ctl((select datadir from gp_segment_configuration c where c.role='m' and c.content=-1), 'stop');
pg_ctl                                              
----------------------------------------------------
waiting for server to shut down done
server stopped

(1 row)

-- this should block since standby is not up and sync replication is on
2: begin;
BEGIN
2: insert into fts_unblock_master values (4);
INSERT 1
2&: commit;  <waiting ...>

-- resume master prober probes
select gp_inject_fault('fts_probe', 'reset', 2);
gp_inject_fault
---------------
t              
(1 row)

-- trigger fts probe and check to see master marked n/u and standby still n/u as
-- still should be in standby down grace period.
0U: select gp_request_fts_probe_scan();
gp_request_fts_probe_scan
-------------------------
t                        
(1 row)
0U: select content, role, preferred_role, mode, status from gp_segment_configuration where content=-1;
content|role|preferred_role|mode|status
-------+----+--------------+----+------
-1     |p   |p             |s   |u     
-1     |m   |m             |s   |u     
(2 rows)

-- set standby down grace period to zero to instantly mark standby down
!\retcode gpconfig -c gp_fts_mark_mirror_down_grace_period -v 0;
-- start_ignore
20181213:16:53:27:026074 gpconfig:sdw:gpadmin-[INFO]:-completed successfully with parameters '-c gp_fts_mark_mirror_down_grace_period -v 0'

-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore
20181213:16:53:27:026198 gpstop:sdw:gpadmin-[INFO]:-Starting gpstop with args: -u
20181213:16:53:27:026198 gpstop:sdw:gpadmin-[INFO]:-Gathering information and validating the environment...
20181213:16:53:27:026198 gpstop:sdw:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information
20181213:16:53:27:026198 gpstop:sdw:gpadmin-[INFO]:-Obtaining Segment details from master...
20181213:16:53:27:026198 gpstop:sdw:gpadmin-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.13200.g595ab27d5e build dev-oss'
20181213:16:53:27:026198 gpstop:sdw:gpadmin-[INFO]:-Signalling all postmaster processes to reload
. 
20181213:16:53:28:026198 gpstop:sdw:gpadmin-[INFO]:---------------------------------------------
20181213:16:53:28:026198 gpstop:sdw:gpadmin-[INFO]:-Some segment postmasters were not reloaded
20181213:16:53:28:026198 gpstop:sdw:gpadmin-[INFO]:---------------------------------------------
20181213:16:53:28:026198 gpstop:sdw:gpadmin-[INFO]:-   Host   Datadir                                                      Port    Status
20181213:16:53:28:026198 gpstop:sdw:gpadmin-[INFO]:-   sdw    /home/gpadmin/workspace/gpdb/gpAux/gpdemo/datadirs/standby   16432   u
20181213:16:53:28:026198 gpstop:sdw:gpadmin-[INFO]:---------------------------------------------

-- end_ignore
(exited with code 1)

-1U: show gp_fts_mark_mirror_down_grace_period;
gp_fts_mark_mirror_down_grace_period
------------------------------------
0                                   
(1 row)

-- trigger fts probe and check to see master marked n/u and standby n/d
0U: select gp_request_fts_probe_scan();
gp_request_fts_probe_scan
-------------------------
t                        
(1 row)
0U: select content, role, preferred_role, mode, status from gp_segment_configuration where content=-1;
content|role|preferred_role|mode|status
-------+----+--------------+----+------
-1     |p   |p             |n   |u     
-1     |m   |m             |n   |d     
(2 rows)

-- should unblock and commit after FTS sent standby a SyncRepOff libpq message
2<:  <... completed>
COMMIT

-- synchronous_standby_names should now be empty on master
-1U: show synchronous_standby_names;
synchronous_standby_names
-------------------------
                         
(1 row)

--hold walsender in startup
select gp_inject_fault_infinite('initialize_wal_sender', 'suspend', dbid) from gp_segment_configuration where role='p' and content=-1;
gp_inject_fault_infinite
------------------------
t                       
(1 row)

-- bring the standby back up and see master s/u and standby s/u
-1U: select pg_ctl_start(c.datadir, c.port, c.content, c.dbid) from gp_segment_configuration c where c.role='m' and c.content=-1;
pg_ctl_start    
----------------
server starting

(1 row)
select gp_wait_until_triggered_fault('initialize_wal_sender', 1, dbid) from gp_segment_configuration where role='p' and content=-1;
gp_wait_until_triggered_fault
-----------------------------
t                            
(1 row)
-- make sure the walsender on master is in startup
select state from gp_stat_replication where gp_segment_id=-1;
state  
-------
startup
(1 row)
0U: select gp_request_fts_probe_scan();
gp_request_fts_probe_scan
-------------------------
t                        
(1 row)
-- standby should continue to be reported as down since walsender is in startup
0U: select content, role, preferred_role, mode, status from gp_segment_configuration where content=-1;
content|role|preferred_role|mode|status
-------+----+--------------+----+------
-1     |p   |p             |n   |u     
-1     |m   |m             |n   |d     
(2 rows)

-- let the walsender proceed
select gp_inject_fault('initialize_wal_sender', 'reset', dbid) from gp_segment_configuration where role='p' and content=-1;
gp_inject_fault
---------------
t              
(1 row)
select wait_for_streaming(-1::smallint);
wait_for_streaming
------------------
                  
(1 row)
0U: select gp_request_fts_probe_scan();
gp_request_fts_probe_scan
-------------------------
t                        
(1 row)
0U: select content, role, preferred_role, mode, status from gp_segment_configuration where content=-1;
content|role|preferred_role|mode|status
-------+----+--------------+----+------
-1     |p   |p             |s   |u     
-1     |m   |m             |s   |u     
(2 rows)

-- everything is back to normal
insert into fts_unblock_master select i from generate_series(1,10)i;
INSERT 10

-- synchronous_standby_names should be back to its original value on master
-1U: show synchronous_standby_names;
synchronous_standby_names
-------------------------
*                        
(1 row)

!\retcode gpconfig -r gp_fts_mark_mirror_down_grace_period;
-- start_ignore
20181213:16:53:30:026288 gpconfig:sdw:gpadmin-[INFO]:-completed successfully with parameters '-r gp_fts_mark_mirror_down_grace_period'

-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore
20181213:16:53:31:026403 gpstop:sdw:gpadmin-[INFO]:-Starting gpstop with args: -u
20181213:16:53:31:026403 gpstop:sdw:gpadmin-[INFO]:-Gathering information and validating the environment...
20181213:16:53:31:026403 gpstop:sdw:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information
20181213:16:53:31:026403 gpstop:sdw:gpadmin-[INFO]:-Obtaining Segment details from master...
20181213:16:53:31:026403 gpstop:sdw:gpadmin-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.13200.g595ab27d5e build dev-oss'
20181213:16:53:31:026403 gpstop:sdw:gpadmin-[INFO]:-Signalling all postmaster processes to reload
. 

-- end_ignore
(exited with code 0)
-1U: show gp_fts_mark_mirror_down_grace_period;
gp_fts_mark_mirror_down_grace_period
------------------------------------
30s                                 
(1 row)
