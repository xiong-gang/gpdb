-- start_ignore
DROP ROLE IF EXISTS role1_memory_test;
DROP
DROP RESOURCE GROUP rg1_memory_test;
ERROR:  resource group "rg1_memory_test" does not exist
DROP ROLE IF EXISTS role2_memory_test;
DROP
DROP RESOURCE GROUP rg2_memory_test;
ERROR:  resource group "rg2_memory_test" does not exist
-- end_ignore

CREATE OR REPLACE FUNCTION repeatPalloc(int, int) RETURNS int AS '@abs_builddir@/../regress/regress@DLSUFFIX@', 'repeatPalloc' LANGUAGE C READS SQL DATA;
CREATE

CREATE OR REPLACE FUNCTION hold_memory(int, int) RETURNS int AS $$ SELECT * FROM repeatPalloc(1, $2) $$ LANGUAGE sql;
CREATE

CREATE OR REPLACE VIEW eat_memory_on_qd AS SELECT hold_memory(0,100);
CREATE

CREATE OR REPLACE VIEW eat_memory_on_one_slice AS SELECT count(*) FROM gp_dist_random('gp_id') t1 WHERE hold_memory(t1.dbid,100)=0 ;
CREATE

CREATE OR REPLACE VIEW eat_memory_on_slices AS SELECT count(*) FROM gp_dist_random('gp_id') t1, gp_dist_random('gp_id') t2 WHERE hold_memory(t1.dbid,100)=0 AND hold_memory(t2.dbid,100)=0 ;
CREATE

CREATE VIEW memory_usage AS SELECT g.rsgname, s.value::json->'-1' AS master_mem, s.value::json->'0' AS seg0_mem, s.value::json->'1' AS seg1_mem, s.value::json->'2' AS seg2_mem FROM pg_resgroup_get_status_kv('memory_usage') s, pg_resgroup g WHERE s.rsgid=g.oid;
CREATE

CREATE FUNCTION round_test(text, integer) RETURNS text AS $$ SELECT (round($1::integer / $2) * $2)::text $$ LANGUAGE sql;
CREATE

CREATE VIEW memory_result AS SELECT rsgname, round_test(master_mem::text, 10) AS master_mem, round_test(seg0_mem::text, 10) AS seg0_mem, round_test(seg1_mem::text, 10) AS seg1_mem, round_test(seg2_mem::text, 10) AS seg2_mem FROM memory_usage WHERE rsgname='rg1_memory_test' OR rsgname='rg2_memory_test';
CREATE

CREATE RESOURCE GROUP rg1_memory_test WITH (concurrency=2, cpu_rate_limit=0.1, memory_limit=0.1);
CREATE
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;
CREATE
CREATE RESOURCE GROUP rg2_memory_test WITH (concurrency=2, cpu_rate_limit=0.1, memory_limit=0.1);
CREATE
CREATE ROLE role2_memory_test RESOURCE GROUP rg2_memory_test;
CREATE

GRANT ALL ON eat_memory_on_qd TO role1_memory_test;
GRANT
GRANT ALL ON eat_memory_on_one_slice TO role1_memory_test;
GRANT
GRANT ALL ON eat_memory_on_slices TO role1_memory_test;
GRANT
GRANT ALL ON memory_result TO role1_memory_test;
GRANT

GRANT ALL ON eat_memory_on_qd TO role2_memory_test;
GRANT
GRANT ALL ON eat_memory_on_one_slice TO role2_memory_test;
GRANT
GRANT ALL ON eat_memory_on_slices TO role2_memory_test;
GRANT
GRANT ALL ON memory_result TO role2_memory_test;
GRANT

-- 1.1) QD only in transaction
1: SET ROLE TO role1_memory_test;
SET
-- check initial state
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |0       |0       |0       
rg2_memory_test|0         |0       |0       |0       
(2 rows)
1: BEGIN;
BEGIN
1: SELECT * FROM eat_memory_on_qd;
hold_memory
-----------
0          
(1 row)
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|100       |0       |0       |0       
rg2_memory_test|0         |0       |0       |0       
(2 rows)
1q: ... <quitting>

-- 1.2) QD only
1: SET ROLE TO role1_memory_test;
SET
-- check initial state
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |0       |0       |0       
rg2_memory_test|0         |0       |0       |0       
(2 rows)
1: SELECT * FROM eat_memory_on_qd;
hold_memory
-----------
0          
(1 row)
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |0       |0       |0       
rg2_memory_test|0         |0       |0       |0       
(2 rows)
1q: ... <quitting>

-- 2.1) QEs on one slice
1: SET ROLE TO role1_memory_test;
SET
1: SELECT 1 FROM eat_memory_on_one_slice;
?column?
--------
1       
(1 row)
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |100     |100     |100     
rg2_memory_test|0         |0       |0       |0       
(2 rows)
1q: ... <quitting>

-- 2.2) QEs on one slice in transaction
1: SET ROLE TO role1_memory_test;
SET
1: BEGIN;
BEGIN
1: SELECT 1 FROM eat_memory_on_one_slice;
?column?
--------
1       
(1 row)
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |100     |100     |100     
rg2_memory_test|0         |0       |0       |0       
(2 rows)
1q: ... <quitting>

-- 2.3) QEs on one slice change resource group
1: SET ROLE TO role1_memory_test;
SET
1: SELECT 1 FROM eat_memory_on_one_slice;
?column?
--------
1       
(1 row)
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |100     |100     |100     
rg2_memory_test|0         |0       |0       |0       
(2 rows)
1: SET ROLE TO role2_memory_test;
SET
1: SELECT 1 FROM eat_memory_on_one_slice;
?column?
--------
1       
(1 row)
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |0       |0       |0       
rg2_memory_test|0         |200     |200     |200     
(2 rows)
1q: ... <quitting>

-- 3) QEs on multiple slices
1: SET ROLE TO role1_memory_test;
SET
1: SELECT 1 FROM eat_memory_on_slices;
?column?
--------
1       
(1 row)
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |200     |200     |200     
rg2_memory_test|0         |0       |0       |0       
(2 rows)
1q: ... <quitting>

-- recheck after cleanup
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |0       |0       |0       
rg2_memory_test|0         |0       |0       |0       
(2 rows)

-- 4) single role concurrency test
1: SET ROLE TO role1_memory_test;
SET
2: SET ROLE TO role1_memory_test;
SET
-- QEs on multiple slices
1: SELECT 1 FROM eat_memory_on_slices;
?column?
--------
1       
(1 row)
2: SELECT 1 FROM eat_memory_on_slices;
?column?
--------
1       
(1 row)
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |400     |400     |400     
rg2_memory_test|0         |0       |0       |0       
(2 rows)
1q: ... <quitting>
2q: ... <quitting>

-- 5) multi role concurrency test
1: SET ROLE TO role1_memory_test;
SET
2: SET ROLE TO role2_memory_test;
SET
-- QEs on multiple slices
1: SELECT * FROM eat_memory_on_slices;
count
-----
9    
(1 row)
2: SELECT * FROM eat_memory_on_slices;
count
-----
9    
(1 row)
SELECT * FROM memory_result;
rsgname        |master_mem|seg0_mem|seg1_mem|seg2_mem
---------------+----------+--------+--------+--------
rg1_memory_test|0         |200     |200     |200     
rg2_memory_test|0         |200     |200     |200     
(2 rows)
1q: ... <quitting>
2q: ... <quitting>

-- cleanup
REVOKE ALL ON eat_memory_on_qd FROM role1_memory_test;
REVOKE
REVOKE ALL ON eat_memory_on_one_slice FROM role1_memory_test;
REVOKE
REVOKE ALL ON eat_memory_on_slices FROM role1_memory_test;
REVOKE
REVOKE ALL ON memory_result FROM role1_memory_test;
REVOKE

REVOKE ALL ON eat_memory_on_qd FROM role2_memory_test;
REVOKE
REVOKE ALL ON eat_memory_on_one_slice FROM role2_memory_test;
REVOKE
REVOKE ALL ON eat_memory_on_slices FROM role2_memory_test;
REVOKE
REVOKE ALL ON memory_result FROM role2_memory_test;
REVOKE

ALTER ROLE role1_memory_test RESOURCE GROUP none;
ALTER
ALTER ROLE role2_memory_test RESOURCE GROUP none;
ALTER

DROP ROLE role1_memory_test;
DROP
DROP ROLE role2_memory_test;
DROP
DROP RESOURCE GROUP rg1_memory_test;
DROP
DROP RESOURCE GROUP rg2_memory_test;
DROP


-- vi:filetype=sql
