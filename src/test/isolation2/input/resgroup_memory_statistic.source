DROP ROLE IF EXISTS role1_memory_test;
DROP ROLE IF EXISTS role2_memory_test;
-- start_ignore
DROP RESOURCE GROUP rg1_memory_test;
DROP RESOURCE GROUP rg2_memory_test;
-- end_ignore

CREATE OR REPLACE FUNCTION repeatPalloc(int, int) RETURNS int AS
'@abs_builddir@/../regress/regress@DLSUFFIX@', 'repeatPalloc'
LANGUAGE C READS SQL DATA;

CREATE OR REPLACE FUNCTION hold_memory(int, int) RETURNS int AS $$
    SELECT * FROM repeatPalloc(1, $2)
$$ LANGUAGE sql;

CREATE OR REPLACE VIEW eat_memory_on_qd AS
	SELECT hold_memory(0,20);

CREATE OR REPLACE VIEW eat_memory_on_one_slice AS
	SELECT count(*)
	FROM
	gp_dist_random('gp_id') t1
	WHERE hold_memory(t1.dbid,20)=0
	;

CREATE OR REPLACE VIEW eat_memory_on_slices AS
	SELECT count(*)
	FROM
	gp_dist_random('gp_id') t1,
	gp_dist_random('gp_id') t2
	WHERE hold_memory(t1.dbid,20)=0
	  AND hold_memory(t2.dbid,20)=0
	;

CREATE VIEW memory_usage AS
	SELECT s.rsgname, s.memory_usage::json->'-1' AS master_mem,
	s.memory_usage::json->'0' AS seg0_mem,
	s.memory_usage::json->'1' AS seg1_mem,
	s.memory_usage::json->'2' AS seg2_mem
	FROM gp_toolkit.gp_resgroup_status s;

CREATE FUNCTION round_test(text, integer) RETURNS text AS $$
	SELECT (round($1::integer / $2) * $2)::text
$$ LANGUAGE sql;

CREATE VIEW memory_result AS
	SELECT rsgname, round_test(master_mem::text, 10) AS master_mem,
	round_test(seg0_mem::text, 10) AS seg0_mem,
	round_test(seg1_mem::text, 10) AS seg1_mem,
	round_test(seg2_mem::text, 10) AS seg2_mem
	FROM memory_usage
	WHERE rsgname='rg1_memory_test' OR rsgname='rg2_memory_test';

CREATE RESOURCE GROUP rg1_memory_test
	WITH (concurrency=2, cpu_rate_limit=0.1, memory_limit=0.29);
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;
CREATE RESOURCE GROUP rg2_memory_test
	WITH (concurrency=2, cpu_rate_limit=0.1, memory_limit=0.29);
CREATE ROLE role2_memory_test RESOURCE GROUP rg2_memory_test;

GRANT ALL ON eat_memory_on_qd TO role1_memory_test;
GRANT ALL ON eat_memory_on_one_slice TO role1_memory_test;
GRANT ALL ON eat_memory_on_slices TO role1_memory_test;
GRANT ALL ON memory_result TO role1_memory_test;

GRANT ALL ON eat_memory_on_qd TO role2_memory_test;
GRANT ALL ON eat_memory_on_one_slice TO role2_memory_test;
GRANT ALL ON eat_memory_on_slices TO role2_memory_test;
GRANT ALL ON memory_result TO role2_memory_test;

-- 1.1) QD only in transaction
1: SET ROLE TO role1_memory_test;
-- check initial state
SELECT * FROM memory_result;
1: BEGIN;
1: SELECT * FROM eat_memory_on_qd;
SELECT * FROM memory_result;
1q:

-- 1.2) QD only
1: SET ROLE TO role1_memory_test;
-- check initial state
SELECT * FROM memory_result;
1: SELECT * FROM eat_memory_on_qd;
SELECT * FROM memory_result;
1q:

-- 2.1) QEs on one slice
1: SET ROLE TO role1_memory_test;
1: SELECT 1 FROM eat_memory_on_one_slice;
SELECT * FROM memory_result;
1q:

-- 2.2) QEs on one slice in transaction
1: SET ROLE TO role1_memory_test;
1: BEGIN;
1: SELECT 1 FROM eat_memory_on_one_slice;
SELECT * FROM memory_result;
1q:

-- 2.3) QEs on one slice change resource group
1: SET ROLE TO role1_memory_test;
1: SELECT 1 FROM eat_memory_on_one_slice;
SELECT * FROM memory_result;
1: SET ROLE TO role2_memory_test;
1: SELECT 1 FROM eat_memory_on_one_slice;
SELECT * FROM memory_result;
1q:

-- 3) QEs on multiple slices
1: SET ROLE TO role1_memory_test;
1: SELECT 1 FROM eat_memory_on_slices;
SELECT * FROM memory_result;
1q:

-- recheck after cleanup
SELECT * FROM memory_result;

-- 4) single role concurrency test
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
-- QEs on multiple slices
1: SELECT 1 FROM eat_memory_on_slices;
2: SELECT 1 FROM eat_memory_on_slices;
SELECT * FROM memory_result;
1q:
2q:

-- 5) multi role concurrency test
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role2_memory_test;
-- QEs on multiple slices
1: SELECT * FROM eat_memory_on_slices;
2: SELECT * FROM eat_memory_on_slices;
SELECT * FROM memory_result;
1q:
2q:

-- cleanup
REVOKE ALL ON eat_memory_on_qd FROM role1_memory_test;
REVOKE ALL ON eat_memory_on_one_slice FROM role1_memory_test;
REVOKE ALL ON eat_memory_on_slices FROM role1_memory_test;
REVOKE ALL ON memory_result FROM role1_memory_test;

REVOKE ALL ON eat_memory_on_qd FROM role2_memory_test;
REVOKE ALL ON eat_memory_on_one_slice FROM role2_memory_test;
REVOKE ALL ON eat_memory_on_slices FROM role2_memory_test;
REVOKE ALL ON memory_result FROM role2_memory_test;

ALTER ROLE role1_memory_test RESOURCE GROUP none;
ALTER ROLE role2_memory_test RESOURCE GROUP none;

DROP ROLE role1_memory_test;
DROP ROLE role2_memory_test;
DROP RESOURCE GROUP rg1_memory_test;
DROP RESOURCE GROUP rg2_memory_test;
