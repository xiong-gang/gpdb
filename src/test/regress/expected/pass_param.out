create schema pass_param;
set search_path=pass_param;
create table pass_param.foo ( a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table pass_param.bar( c int, d int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create index foo_idx on pass_param.foo using btree(b);
insert into pass_param.foo values (1,1),(1,2),(1,5);
insert into pass_param.bar values (1,1);
insert into pass_param.bar select i,i from generate_series(3,10)i;
analyze pass_param.foo;
analyze pass_param.bar;
set enable_hashjoin to off;
set enable_mergejoin to off;
set enable_seqscan to off;
set enable_material to off;
set enable_bitmapscan to off;
set enable_nestloop to on;
set enable_indexscan to on;
set gp_vmem_idle_resource_timeout to 100000;
explain select b from foo,bar where foo.b = bar.c;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=10000000000.13..10000000403.71 rows=4 width=4)
   ->  Nested Loop  (cost=10000000000.13..10000000403.71 rows=2 width=4)
         ->  Seq Scan on bar  (cost=10000000000.00..10000000002.09 rows=5 width=4)
         ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=0.13..44.61 rows=1 width=4)
               Hash Key: foo.b
               ->  Index Only Scan using foo_idx on foo  (cost=0.13..44.59 rows=1 width=4)
                     Index Cond: (b = bar.c)
 Optimizer: Postgres query optimizer
(8 rows)

select b from foo,bar where foo.b = bar.c;
 b 
---
 1
 5
(2 rows)

