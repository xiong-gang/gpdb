CREATE FUNCTION checkResourceQueueMemoryLimits(cstring) RETURNS boolean
AS '@abs_srcdir@/regress.so', 'checkResourceQueueMemoryLimits' LANGUAGE C READS SQL DATA;
CREATE TABLE test_table(c1 int, c2 int); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO test_table values(1, 2);
-- MPP-17240
CREATE RESOURCE QUEUE test_q WITH (ACTIVE_STATEMENTS = 1, MEMORY_LIMIT='10MB');
WARNING:  resource scheduling is disabled
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
CREATE ROLE test_role WITH RESOURCE QUEUE test_q;
WARNING:  resource scheduling is disabled
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
NOTICE:  resource group required -- using default resource group "default_group"
WARNING:  resource scheduling is disabled  (seg0 10.153.10.208:25432 pid=22803)
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
WARNING:  resource scheduling is disabled  (seg1 10.153.10.208:25433 pid=22804)
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
WARNING:  resource scheduling is disabled  (seg2 10.153.10.208:25434 pid=22805)
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
GRANT SELECT ON test_table TO test_role;
SET STATEMENT_MEM = '125MB';
-- should return true
select checkResourceQueueMemoryLimits('test_q'); 
 checkresourcequeuememorylimits 
--------------------------------
 f
(1 row)

SET ROLE test_role; 
-- should deadlock as there aren't enough resources to run the query.
-- query should be assigned 125MB, but queue only allows 10MB 
SELECT count(*) FROM test_table; 
 count 
-------
     1
(1 row)

RESET ROLE;
-- should return true
select checkResourceQueueMemoryLimits('test_q'); 
 checkresourcequeuememorylimits 
--------------------------------
 f
(1 row)

RESET STATEMENT_MEM;
REVOKE SELECT ON test_table FROM test_role;
DROP ROLE test_role; 
DROP RESOURCE QUEUE test_q;
WARNING:  resource scheduling is disabled
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
-- MPP-15992
CREATE RESOURCE QUEUE test_q WITH (ACTIVE_STATEMENTS = 1, MEMORY_LIMIT='8GB');
WARNING:  resource scheduling is disabled
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
CREATE ROLE test_role WITH RESOURCE QUEUE test_q;
WARNING:  resource scheduling is disabled
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
NOTICE:  resource group required -- using default resource group "default_group"
WARNING:  resource scheduling is disabled  (seg0 10.153.10.208:25432 pid=22803)
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
WARNING:  resource scheduling is disabled  (seg1 10.153.10.208:25433 pid=22804)
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
WARNING:  resource scheduling is disabled  (seg2 10.153.10.208:25434 pid=22805)
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
GRANT SELECT ON test_table TO test_role;
SET ROLE test_role; 
-- should return result 
SELECT count(*) FROM test_table; 
 count 
-------
     1
(1 row)

RESET ROLE;
ALTER RESOURCE QUEUE test_q WITH (ACTIVE_STATEMENTS = 1, MEMORY_LIMIT='10GB');
WARNING:  resource scheduling is disabled
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
SET ROLE test_role; 
-- should return result 
SELECT count(*) FROM test_table; 
 count 
-------
     1
(1 row)

RESET ROLE;
-- should return true
select checkResourceQueueMemoryLimits('test_q'); 
 checkresourcequeuememorylimits 
--------------------------------
 f
(1 row)

ALTER RESOURCE QUEUE test_q WITH (ACTIVE_STATEMENTS = 1, MEMORY_LIMIT='7GB');
WARNING:  resource scheduling is disabled
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
SET ROLE test_role; 
-- should return result 
SELECT count(*) FROM test_table; 
 count 
-------
     1
(1 row)

RESET ROLE;
-- should return true
select checkResourceQueueMemoryLimits('test_q'); 
 checkresourcequeuememorylimits 
--------------------------------
 f
(1 row)

REVOKE SELECT ON test_table FROM test_role;
DROP TABLE test_table;
DROP ROLE test_role; 
DROP RESOURCE QUEUE test_q;
WARNING:  resource scheduling is disabled
HINT:  To enable set resource_scheduler=on and gp_resource_manager=queue
DROP FUNCTION checkResourceQueueMemoryLimits(cstring);
